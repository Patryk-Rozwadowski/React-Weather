{"version":3,"sources":["modules/Temperature/Temperature.js","modules/ErrorInfo/ErrorInfo.js","modules/LoadingAnimation/LoadingAnimation.js","modules/CityInput/CityInput.js","modules/General/General.js","modules/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Temperature","props","className","src","icon","alt","temp","desc","tempMin","tempMax","windSpeed","style","windDeg","pressure","cloud","humidity","ErrorInfo","errorInfo","errorStatus","LoadingAnimation","CityInput","onSubmit","submit","placeholder","value","cityValue","onChange","onChangeHandler","General","faMapMarkerAlt","city","country","time","Home","homeTitle","homeText","App","componentWillUnmount","setState","isMounted","fetchData","e","a","preventDefault","input","state","url","isLoading","_isMount","axios","get","then","res","temperature","data","main","temp_max","temp_min","description","weather","cloudinnes","clouds","all","wind","speed","deg","sys","error","catch","cod","message","target","s","oneDigitFormat","num","toFixed","getTimeHandler","date","Date","hours","getHours","minutes","getMinutes","submitHandler","notFound","str","charAt","toUpperCase","slice","this","firstLetterCapitalize","transform","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9485f6b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Temperature.css';\r\n\r\nconst Temperature = props =>\r\n    <div className='row'>\r\n\r\n        <div className='Temperature'>\r\n\r\n            <span><img className='TemperatureIcon' src={props.icon} alt='weather icon' /></span>\r\n\r\n            <span className='TemperatureTitle sectionTextLight'>{props.temp}°C</span>\r\n\r\n            <section className='TemperatureInfoContainer'>\r\n                <div className='row'>\r\n                    <span className='sectionTitle TemperatureInfoTitle'> {props.desc} </span>\r\n                </div>           \r\n               \r\n                <div className='row'>\r\n                    <span className='sectionText'>Min: {props.tempMin} °C</span>\r\n                    <span className='sectionText'>Max: {props.tempMax} °C</span>\r\n                </div>\r\n\r\n                <div className='row'>\r\n                    <span className='sectionText'>Wind: {props.windSpeed} m/s </span>\r\n                    <span className='sectionText' style={props.windDeg}> ➤ </span>\r\n                </div>\r\n\r\n                <div className='row'>\r\n                    <span className='sectionText'>Pressure: {props.pressure} hPa</span>\r\n                </div>\r\n\r\n                <div className='row'>\r\n                    <span className='sectionText'>&#x2601; {props.cloud}%</span>\r\n                    <span className='sectionText'>&#x1f4a7; {props.humidity}%</span>'\r\n                </div>\r\n\r\n            </section>\r\n\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\nexport default Temperature;","import React from 'react';\r\nimport '../style.css';\r\nimport './ErrorInfo.css';\r\n\r\nconst ErrorInfo = props => \r\n<div>\r\n    <div className='ErrorInfoContainer containerBg'>\r\n        <span className='sectionTitle'>Status: {props.errorInfo} - {props.errorStatus}</span>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\nexport default ErrorInfo;","import React from 'react';\r\nimport './LoadingAnimation.css'\r\nconst LoadingAnimation = () => \r\n    <div>\r\n        <div className='CircleAnimation'>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    </div>\r\n\r\n\r\nexport default LoadingAnimation;","import React from 'react';\r\nimport './CityInput.css'\r\n\r\nconst CityInput = props =>\r\n\r\n    <div className='SearchBarContainer'>\r\n        <form onSubmit={props.submit} >\r\n            <input placeholder='&#8981;'\r\n                className='CityInput'\r\n                value={props.cityValue}\r\n                onChange={props.onChangeHandler} >\r\n            </input>\r\n        </form>\r\n    </div>\r\n\r\nexport default CityInput;","import React from 'react';\r\nimport './General.css';\r\nimport '../style.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nconst General = props =>\r\n\r\n    <div className='GeneralTitle'>\r\n        <span className='sectionTitle'> <FontAwesomeIcon icon={faMapMarkerAlt} /> {props.city}, {props.country}</span>\r\n        <span className='sectionTextLight'>{props.time}</span>\r\n    </div>\r\n    \r\nexport default General;","import React from 'react';\r\n\r\nimport './Home.css';\r\n\r\nconst Home = props =>\r\n\r\n    <section className='HomeContainer'>\r\n        \r\n        <div className='row'>\r\n            <h1 className='sectionTitle'>{props.homeTitle}</h1>\r\n        </div>\r\n\r\n        <div className='row'>\r\n            <h2 className='sectionTextLight'>{props.homeText}</h2>\r\n        </div>\r\n    </section>\r\n\r\nexport default Home;","import React from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport './reset.css';\r\nimport './modules/style.css'\r\n\r\nimport Temperature from './modules/Temperature/Temperature';\r\nimport ErrorInfo from './modules/ErrorInfo/ErrorInfo';\r\nimport LoadingAnimation from './modules/LoadingAnimation/LoadingAnimation';\r\nimport CityInput from './modules/CityInput/CityInput';\r\nimport General from './modules/General/General';\r\nimport Home from './modules/Home/Home';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      city: '',\r\n      country: '',\r\n      description: '',\r\n      input: '',\r\n      time: '',\r\n      temperature: {\r\n        temp: '',\r\n        tempMax: '',\r\n        tempMin: '',\r\n      },\r\n      humidity: '',\r\n      pressure: '',\r\n      cloudinnes: '',\r\n      weather: '',\r\n      windSpeed: '',\r\n      windDeg: '',\r\n      icon: '',\r\n      notFound: '',\r\n      error: '',\r\n      errorStatus: '',\r\n      errorInfo: '',\r\n      isLoading: false,\r\n      isMounted: false,\r\n    }\r\n  }\r\n\r\n  componentWillUnmount = () => {\r\n    this.setState({ isMounted: false });\r\n  }\r\n\r\n  fetchData = async e => {\r\n    e.preventDefault();\r\n\r\n    const { input } = this.state;\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${input}&units=metric&appid=4608dbdd344e79698ed563db79599f06`;\r\n    this.setState({ isLoading: true })\r\n    this._isMount = false;\r\n    axios\r\n      .get(url)\r\n      .then(res => this.setState({\r\n        temperature: { temp: res.data.main.temp, tempMax: res.data.main.temp_max, tempMin: res.data.main.temp_min },\r\n        description: res.data.weather[0].description,\r\n        icon: res.data.weather[0].icon,\r\n        humidity: res.data.main.humidity,\r\n        pressure: res.data.main.pressure,\r\n        cloudinnes: res.data.clouds.all,\r\n        windSpeed: res.data.wind.speed,\r\n        windDeg: res.data.wind.deg,\r\n        city: input,\r\n        country: res.data.sys.country,\r\n        isLoading: false,\r\n        error: false,\r\n        isMounted: true\r\n      }))\r\n\r\n      .catch(error => this.setState({ error: true, errorStatus: error.cod, errorInfo: error.message, isLoading: false }))\r\n  }\r\n\r\n  onChangeHandler = (e) => {\r\n\r\n    if (e.target.value > 4) {\r\n      this.s();\r\n      this.setState({\r\n        input: e.target.value,\r\n      });\r\n    }\r\n    else {\r\n      this.setState({\r\n        input: e.target.value,\r\n      });\r\n    }\r\n  }\r\n\r\n  firstLetterCapitalize(str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1);\r\n  }\r\n\r\n  oneDigitFormat = (num) => {\r\n    return num ? num.toFixed(1) : null;\r\n  }\r\n\r\n  getTimeHandler = () => {\r\n    const date = new Date();\r\n    const hours = date.getHours();\r\n    const minutes = date.getMinutes();\r\n    let time;\r\n\r\n    if (minutes >= 0 && minutes < 10) {\r\n      time = `${hours}:0${minutes}`;\r\n    }\r\n    else {\r\n      time = `${hours}:${minutes}`;\r\n    }\r\n    this.setState({ time })\r\n  }\r\n\r\n  submitHandler = e => {\r\n    e.preventDefault();\r\n    this.getTimeHandler();\r\n    this.fetchData(e);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <div className='container'>\r\n\r\n          <nav>\r\n            <CityInput\r\n              submit={e => this.submitHandler(e)}\r\n              cityValue={this.state.input}\r\n              onChangeHandler={e => this.onChangeHandler(e)}\r\n            />\r\n          </nav>\r\n\r\n          <main>\r\n\r\n            {\r\n              this.state.error === true && <ErrorInfo\r\n                errorStatus={this.state.errorStatus}\r\n                errorInfo={this.state.errorInfo} />\r\n            }\r\n\r\n            {\r\n              this.state.input === '' && <Home\r\n                homeTitle='Weather in your city' \r\n                homeText='Write city in searcher'/>\r\n            }\r\n\r\n            {\r\n              this.state.isLoading === true && <LoadingAnimation />\r\n            }\r\n\r\n\r\n            {\r\n              this.state.isMounted === true &&\r\n\r\n              <div className='GeneralContainer'>\r\n                <General\r\n                  city={this.firstLetterCapitalize(this.state.city)}\r\n                  time={this.state.time}\r\n                  country={this.state.country}\r\n                />\r\n                <Temperature\r\n                  temp={this.oneDigitFormat(this.state.temperature.temp) || '0'}\r\n                  icon={`http://openweathermap.org/img/wn/${this.state.icon}@2x.png`}\r\n                  tempMin={this.oneDigitFormat(this.state.temperature.tempMin) || '0'}\r\n                  tempMax={this.oneDigitFormat(this.state.temperature.tempMax) || '0'}\r\n                  desc={this.firstLetterCapitalize(this.state.description) || '0'}\r\n                  windSpeed={this.state.windSpeed}\r\n                  windDeg={{ transform: `rotate(${this.state.windDeg}deg)` }}\r\n                  pressure={this.oneDigitFormat(this.state.pressure)}\r\n                  cloud={this.state.cloudinnes}\r\n                  humidity={this.state.humidity}\r\n                />\r\n              </div>\r\n\r\n            }\r\n\r\n          </main>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}