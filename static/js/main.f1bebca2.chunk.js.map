{"version":3,"sources":["modules/Temperature/Temperature.js","modules/ErrorInfo/ErrorInfo.js","modules/LoadingAnimation/LoadingAnimation.js","modules/CityInput/CityInput.js","modules/General/General.js","App.js","serviceWorker.js","index.js"],"names":["Temperature","props","className","src","icon","alt","temp","desc","tempMin","tempMax","windSpeed","style","windDeg","pressure","cloud","ErrorInfo","errorInfo","errorStatus","LoadingAnimation","CityInput","onSubmit","submit","placeholder","value","cityValue","onChange","onChangeHandler","General","faMapMarkerAlt","city","country","time","App","componentWillUnmount","setState","isMounted","fetchData","e","a","preventDefault","input","state","url","isLoading","_isMount","axios","get","then","res","temperature","data","main","temp_max","temp_min","description","weather","humidity","cloudinnes","clouds","all","wind","speed","deg","sys","error","catch","cod","message","target","s","getTimeHandler","date","Date","hours","getHours","minutes","getMinutes","notFound","str","charAt","toUpperCase","slice","num","toFixed","this","firstLetterCapitalize","temperatureFormat","transform","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1bebca2.chunk.js","sourcesContent":["import React from 'react';\nimport './Temperature.css';\n\nconst Temperature = props =>\n    <div className='row'>\n\n        <div className='Temperature'>\n\n            <span><img className='TemperatureIcon' src={props.icon} alt='weather icon' /></span>\n\n            <span className='TemperatureTitle sectionTextLight'>{props.temp}°C</span>\n\n            <section className='TemperatureInfoContainer'>\n                <div className='row'>\n                    <span className='sectionTitle TemperatureInfoTitle'> {props.desc} </span>\n                </div>           \n               \n                <div className='row'>\n                    <span className='sectionText'>Min: {props.tempMin} °C</span>\n                    <span className='sectionText'>Max: {props.tempMax} °C</span>\n                </div>\n\n                <div className='row'>\n                    <span className='sectionText'>Wind: {props.windSpeed} m/s </span>\n                    <span className='sectionText' style={props.windDeg}> ➤ </span>\n                </div>\n\n                <div className='row'>\n                    <span className='sectionText'>Pressure: {props.pressure}</span>\n                </div>\n\n                <div className='row'>\n                    <span className='sectionText'>&#x2601; {props.cloud}%</span>\n                </div>\n\n            </section>\n\n        </div>\n\n    </div>\n\n\nexport default Temperature;","import React from 'react';\nimport '../style.css';\nimport './ErrorInfo.css';\n\nconst ErrorInfo = props => \n<div>\n    <div className='ErrorInfoContainer containerBg'>\n        <span className='sectionTitle'>Status: {props.errorInfo} - {props.errorStatus}</span>\n    </div>\n</div>\n\n\n\nexport default ErrorInfo;","import React from 'react';\nimport './LoadingAnimation.css'\nconst LoadingAnimation = () => \n    <div>\n        <div className='CircleAnimation'>\n            <div></div>\n            <div></div>\n        </div>\n    </div>\n\n\nexport default LoadingAnimation;","import React from 'react';\nimport './CityInput.css'\n\nconst CityInput = props =>\n\n    <div className='SearchBarContainer'>\n        <form onSubmit={props.submit} >\n            <input placeholder='&#x1f50d;'\n                className='CityInput'\n                value={props.cityValue}\n                onChange={props.onChangeHandler} >\n            </input>\n        </form>\n    </div>\n\nexport default CityInput;","import React from 'react';\nimport './General.css';\nimport '../style.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons'\n\n\nconst General = props =>\n\n    <div className='GeneralTitle'>\n        <span className='sectionTitle'> <FontAwesomeIcon icon={faMapMarkerAlt} /> {props.city}, {props.country}</span>\n        <span className='sectionTitle'>{props.time}</span>\n    </div>\n    \nexport default General;","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport './reset.css';\nimport './modules/style.css'\n\nimport Temperature from './modules/Temperature/Temperature';\nimport ErrorInfo from './modules/ErrorInfo/ErrorInfo';\nimport LoadingAnimation from './modules/LoadingAnimation/LoadingAnimation';\nimport CityInput from './modules/CityInput/CityInput'\nimport General from './modules/General/General';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: '',\n      country: '',\n      description: '',\n      input: '',\n      time: '',\n      temperature: {\n        temp: '',\n        tempMax: '',\n        tempMin: '',\n      },\n      humidity: '',\n      pressure: '',\n      cloudinnes: '',\n      weather: '',\n      windSpeed: '',\n      windDeg: '',\n      icon: '',\n      notFound: '',\n      error: '',\n      errorStatus: '',\n      errorInfo: '',\n      isLoading: false,\n      isMounted: false,\n    }\n  }\n\n  componentWillUnmount = () => {\n    this.setState({ isMounted: false });\n  }\n\n  fetchData = async e => {\n    e.preventDefault();\n\n    const { input } = this.state;\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${input}&units=metric&appid=4608dbdd344e79698ed563db79599f06`;\n    this.setState({ isLoading: true })\n    this._isMount = false;\n    axios\n      .get(url)\n      .then(res => this.setState({\n        temperature: { temp: res.data.main.temp, tempMax: res.data.main.temp_max, tempMin: res.data.main.temp_min },\n        description: res.data.weather[0].description,\n        icon: res.data.weather[0].icon,\n        humidity: res.data.main.humidity,\n        pressure: res.data.main.pressure,\n        cloudinnes: res.data.clouds.all,\n        windSpeed: res.data.wind.speed,\n        windDeg: res.data.wind.deg,\n        city: input,\n        country: res.data.sys.country,\n        isLoading: false,\n        error: false,\n        isMounted: true\n      }))\n\n      .catch(error => this.setState({ error: true, errorStatus: error.cod, errorInfo: error.message, isLoading: false }))\n  }\n\n  onChangeHandler = (e) => {\n\n    if (e.target.value > 4) {\n      this.s();\n      this.setState({\n        input: e.target.value,\n      });\n    }\n    else {\n      this.setState({\n        input: e.target.value,\n      });\n    }\n  }\n\n  firstLetterCapitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  temperatureFormat(num) {\n    return num ? num.toFixed(1) : null;\n  }\n\n  getTimeHandler = () => {\n    const date = new Date();\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    let time;\n\n    if (minutes >= 0 && minutes < 10) {\n      time = `${hours}:0${minutes}`;\n    }\n    else {\n      time = `${hours}:${minutes}`;\n    }\n    this.setState({ time })\n  }\n\n  s = e => {\n    e.preventDefault();\n    this.getTimeHandler();\n    this.fetchData(e);\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <div className='container'>\n\n          <div>\n            <CityInput\n              submit={e => this.s(e)}\n              cityValue={this.state.input}\n              onChangeHandler={e => this.onChangeHandler(e)}\n            />\n          </div>\n\n          <main>\n\n            {this.state.error === true && <ErrorInfo errorStatus={this.state.errorStatus} errorInfo={this.state.errorInfo} />}\n\n            {this.state.input === '' && <h1>Write your city</h1>}\n\n            {this.state.isLoading === true && <LoadingAnimation />}\n\n\n            {this.state.isMounted === true && <div className='GeneralContainer'>\n              <General\n                city={this.firstLetterCapitalize(this.state.city)}\n                time={this.state.time}\n                country={this.state.country}\n              />\n              <Temperature\n                temp={this.temperatureFormat(this.state.temperature.temp) || '0'}\n                icon={`http://openweathermap.org/img/wn/${this.state.icon}@2x.png`}\n                tempMin={this.temperatureFormat(this.state.temperature.tempMin) || '0'}\n                tempMax={this.temperatureFormat(this.state.temperature.tempMax) || '0'}\n                desc={this.firstLetterCapitalize(this.state.description) || '0'}\n                windSpeed={this.state.windSpeed}\n                windDeg={{ transform: `rotate(${this.state.windDeg}deg)` }}\n                pressure={this.state.pressure}\n                cloud={this.state.cloudinnes}\n              />\n            </div>\n            }\n\n          </main>\n        </div>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}