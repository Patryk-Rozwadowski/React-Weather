{"version":3,"sources":["modules/CityInput/CityInput.js","SENS_DATA.js","redux/actions/actions.js","modules/Containers/cityInput.container.js","redux/DevTools/DevTools.js","modules/Temperature/Temperature.js","modules/LoadingAnimation/LoadingAnimation.js","modules/ErrorInfo/ErrorInfo.js","modules/Containers/ErrorInfo.container.js","modules/Containers/Temperature.container.js","modules/General/General.js","modules/Containers/General.container.js","modules/index.js","modules/Home/Home.js","routes.js","App.js","redux/reducers/weather.js","redux/store.js","serviceWorker.js","index.js"],"names":["CityInput","state","city","onChangeHandler","event","preventDefault","setState","target","value","className","placeholder","type","this","onChange","onClick","props","fetchInfo","React","Component","fetchDataLoading","bool","isLoading","fetchDataOk","data","fetchDataError","error","checkIsMounted","isMounted","CityInputContainer","onSearchCity","connect","dispatch","url","axios","then","res","catch","response","fetchData","createDevTools","toggleVisibilityKey","changePositionKey","Temperature","src","icon","alt","temp","desc","tempMin","tempMax","windSpeed","style","transform","windDeg","pressure","clouds","humidity","LoadingAnimation","ErrorInfo","Fragment","errorInfo","errorStatus","ErrorInfoContainer","TemperatureContainer","weather","description","temperature","temp_min","temp_max","wind","speed","deg","all","General","componentDidMount","time","date","Date","hours","getHours","minutes","getMinutes","faMapMarkerAlt","country","GeneralContainer","name","IndexModules","DevTools","Home","submitForm","e","history","push","onSubmit","withRouter","AppRoutes","basename","process","exact","path","component","App","initialState","sys","weatherReducer","action","main","statusText","status","store","createStore","compose","applyMiddleware","thunk","instrument","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a486d403.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CityInput.css'\r\n\r\nimport { API } from '../../SENS_DATA';\r\n\r\nclass CityInput extends React.Component {\r\n    state = {\r\n        city: ''\r\n    }\r\n\r\n    onChangeHandler = event => {\r\n        event.preventDefault();\r\n        this.setState({ city: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='SearchBarContainer'>\r\n                <input placeholder='&#x1f50d;'\r\n                    type='text'\r\n                    className='CityInput'\r\n                    value={this.state.city}\r\n                    onChange={this.onChangeHandler} />\r\n                <button className='submit-button CityInput' onClick={() => this.props.fetchInfo(`https://api.openweathermap.org/data/2.5/weather?q=${this.state.city}&units=metric&appid=${API}`)}> SEND </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CityInput;","export const API = '4608dbdd344e79698ed563db79599f06';","import axios from 'axios';\r\n\r\nexport const FETCH_DATA = 'FETCH_DATA';\r\nexport const FETCH_DATA_LOADING = 'FETCH_DATA_PENDING';\r\nexport const FETCH_DATA_OK = 'FETCH_DATA_OK';\r\nexport const FETCH_DATA_ERROR = 'FETCH_DATA_ERROR';\r\nexport const IS_MOUNTED = 'IS_MOUNTED';\r\n\r\nexport const fetchData = (url) => {\r\n    return (dispatch) => {\r\n        dispatch(fetchDataLoading(true));\r\n\r\n        axios(url)\r\n            .then((res) => {\r\n                dispatch(fetchDataLoading(false));\r\n                return res;\r\n            })\r\n            .then((res) => dispatch(fetchDataOk(res.data)))\r\n            .catch(error => dispatch(fetchDataError(error.response)))\r\n        dispatch(checkIsMounted(true))\r\n    }\r\n}\r\n\r\nexport const fetchDataLoading = (bool) => {\r\n    return {\r\n        type: FETCH_DATA_LOADING,\r\n        isLoading: bool\r\n    }\r\n}\r\n\r\nexport const fetchDataOk = (data) => {\r\n    return {\r\n        type: FETCH_DATA_OK,\r\n        data\r\n    }\r\n}\r\n\r\nexport const fetchDataError = (error) => {\r\n    return {\r\n        type: FETCH_DATA_ERROR,\r\n        error\r\n    }\r\n}\r\n\r\nexport const checkIsMounted = (bool) => {\r\n    return {\r\n        type: IS_MOUNTED,\r\n        isMounted: bool\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CityInput from '../CityInput/CityInput';\r\nimport { fetchData } from '../../redux/actions/actions';\r\n\r\nclass CityInputContainer extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CityInput\r\n                    fetchInfo={this.props.onSearchCity}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchCity: url => dispatch(fetchData(url))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(CityInputContainer);","import React from 'react';\r\nimport { createDevTools } from 'redux-devtools';\r\nimport LogMonitor from 'redux-devtools-log-monitor';\r\nimport DockMonitor from 'redux-devtools-dock-monitor';\r\n\r\nexport default createDevTools(\r\n    <DockMonitor toggleVisibilityKey='ctrl-h'\r\n        changePositionKey='ctrl-q'>\r\n        <LogMonitor />\r\n    </DockMonitor>\r\n);","import React from 'react';\r\nimport './Temperature.css';\r\n\r\nclass Temperature extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='row'>\r\n\r\n                <div className='Temperature'>\r\n\r\n                    <span><img className='TemperatureIcon' src={this.props.icon} alt='weather icon' /></span>\r\n\r\n                    <span className='TemperatureTitle sectionTextLight'>{this.props.temp}°C</span>\r\n\r\n                    <section className='TemperatureInfoContainer'>\r\n                        <div className='row'>\r\n                            <span className='sectionTitle TemperatureInfoTitle'> {this.props.desc} </span>\r\n                        </div>\r\n\r\n                        <div className='row'>\r\n                            <span className='sectionText'>Min: {this.props.tempMin} °C</span>\r\n                            <span className='sectionText'>Max: {this.props.tempMax} °C</span>\r\n                        </div>\r\n\r\n                        <div className='row'>\r\n                            <span className='sectionText'>Wind: {this.props.windSpeed} m/s </span>\r\n                            <span className='sectionText' style={{ transform: `rotate(${this.props.windDeg}deg)` }}> ➤ </span>\r\n                        </div>\r\n\r\n                        <div className='row'>\r\n                            <span className='sectionText'>Pressure: {this.props.pressure} hPa</span>\r\n                        </div>\r\n\r\n                        <div className='row'>\r\n                            <span className='sectionText'>&#x2601; {this.props.clouds}%</span>\r\n                            <span className='sectionText'>&#x1f4a7; {this.props.humidity}%</span>'\r\n                        </div>\r\n\r\n                    </section>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Temperature;","import React from 'react';\nimport './LoadingAnimation.css'\nconst LoadingAnimation = () => \n    <div>\n        <div className='CircleAnimation'>\n            <div></div>\n            <div></div>\n        </div>\n    </div>\n\n\nexport default LoadingAnimation;","import React from 'react';\nimport '../style.css';\nimport './ErrorInfo.css';\n\nconst ErrorInfo = props =>\n\n    <React.Fragment>\n        <div className='ErrorInfoContainer'>\n            <span className='sectionTitle errorTitle'>Status: {props.errorInfo} - {props.errorStatus}</span>\n        </div>\n    </React.Fragment>\n\n\n\nexport default ErrorInfo;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ErrorInfo from '../ErrorInfo/ErrorInfo';\r\n\r\nclass ErrorInfoContainer extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <ErrorInfo\r\n                    errorInfo={this.props.errorInfo}\r\n                    errorStatus={this.props.errorStatus} />\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        errorInfo: state.errorInfo,\r\n        errorStatus: state.errorStatus\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(ErrorInfoContainer);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Temperature from '../Temperature/Temperature';\r\nimport LoadingAnimation from '../LoadingAnimation/LoadingAnimation';\r\nimport ErrorInfoContainer from './ErrorInfo.container';\r\n\r\nclass TemperatureContainer extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {\r\n                    this.props.isLoading === true && <LoadingAnimation />\r\n                }\r\n\r\n                {\r\n                    this.props.error === true &&\r\n                    <div className='ErrorCenter'>\r\n                        <ErrorInfoContainer />\r\n                    </div>\r\n                }\r\n\r\n                {\r\n                    this.props.isMounted === true\r\n                    && this.props.error === false &&\r\n                    <Temperature\r\n                        icon={`http://openweathermap.org/img/wn/${this.props.icon}@2x.png`}\r\n                        desc={this.props.desc}\r\n                        temp={this.props.temp}\r\n                        tempMin={this.props.tempMin}\r\n                        tempMax={this.props.tempMax}\r\n                        windSpeed={this.props.windSpeed}\r\n                        windDeg={this.props.windDeg}\r\n                        pressure={this.props.pressure}\r\n                        clouds={this.props.clouds}\r\n                        humidity={this.props.humidity}\r\n                    />\r\n                }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        icon: state.weather.icon,\r\n        desc: state.weather.description,\r\n        temp: state.temperature.temp,\r\n        tempMin: state.temperature.temp_min,\r\n        tempMax: state.temperature.temp_max,\r\n        pressure: state.pressure.pressure,\r\n        windSpeed: state.wind.speed,\r\n        windDeg: state.wind.deg,\r\n        clouds: state.clouds.all,\r\n        humidity: state.humidity.humidity,\r\n        isMounted: state.isMounted,\r\n        isLoading: state.isLoading,\r\n        error: state.error\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(TemperatureContainer);","import React from 'react';\r\nimport './General.css';\r\nimport '../style.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nclass General extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            time: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        const date = new Date();\r\n        const hours = date.getHours();\r\n        const minutes = date.getMinutes();\r\n        let time;\r\n\r\n        if (minutes >= 0 && minutes < 10) {\r\n            time = `${hours}:0${minutes}`;\r\n        }\r\n        else {\r\n            time = `${hours}:${minutes}`;\r\n        }\r\n        this.setState({ time })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='GeneralTitle'>\r\n                <span className='sectionTitle'> <FontAwesomeIcon icon={faMapMarkerAlt} /> {this.props.city}, {this.props.country}</span>\r\n                <span className='sectionTextLight'>{this.state.time}</span>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default General;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport General from '../General/General';\r\n\r\nimport LoadingAnimation from '../LoadingAnimation/LoadingAnimation';\r\n\r\nclass GeneralContainer extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.props.isLoading === true && <LoadingAnimation />}\r\n                {this.props.error === false && this.props.isMounted &&\r\n                    <General\r\n                        city={this.props.city}\r\n                        country={this.props.country} />}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        city: state.city.name,\r\n        country: state.country.country,\r\n        isMounted: state.isMounted,\r\n        isLoading: state.isLoading,\r\n        errorStatus: state.errorStatus,\r\n        error: state.error\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(GeneralContainer);","import React from \"react\";\r\n\r\nimport CityInputContainer from './Containers/cityInput.container'\r\nimport DevTools from '../redux/DevTools/DevTools';\r\nimport TemperatureContainer from './Containers/Temperature.container';\r\nimport GeneralContainer from './Containers/General.container';\r\n\r\nexport default class IndexModules extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='App'>\r\n                <main className='container'>\r\n                    <CityInputContainer />\r\n                    <GeneralContainer />\r\n                    <TemperatureContainer />\r\n                    <DevTools />\r\n                </main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nimport { withRouter } from 'react-router-dom'\r\nimport CityInputContainer from '../Containers/cityInput.container'\r\nimport './Home.css';\r\n\r\n\r\nclass Home extends React.Component {\r\n\r\n    submitForm = (e) => {\r\n        e.preventDefault()\r\n        this.props.history.push('/weather');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='App'>\r\n                    <section className='HomeContainer'>\r\n\r\n                        <div className='row'>\r\n                            <h1 className='sectionTitle'>Weather in your</h1>\r\n                        </div>\r\n                        <div className='row'>\r\n                            <h2 className='sectionTextLight'>City!</h2>\r\n                        </div>\r\n                        <form onSubmit={this.submitForm}>\r\n                            <CityInputContainer onSubmit={this.submitForm} />\r\n                        </form>\r\n                    </section>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(Home);","import React from \"react\";\r\nimport { Route, BrowserRouter } from 'react-router-dom'\r\n\r\nimport IndexModules from './modules/index';\r\nimport Home from './modules/Home/Home';\r\n\r\nexport const AppRoutes = () =>\r\n\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                <Route exact path=\"/\" component={Home} />\r\n                <Route path=\"/weather\" component={IndexModules} />\r\n        </BrowserRouter>","import React from \"react\";\r\n\r\nimport './App.css';\r\nimport './reset.css';\r\nimport './modules/style.css'\r\n\r\nimport { AppRoutes } from './routes';\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <AppRoutes />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { FETCH_DATA_LOADING, FETCH_DATA_OK, FETCH_DATA_ERROR, IS_MOUNTED } from '../actions/actions';\r\n\r\nconst initialState = {\r\n    weather: {},\r\n    temperature: {},\r\n    wind: {},\r\n    clouds: {},\r\n    sys: {},\r\n    pressure: {},\r\n    humidity: {},\r\n    city: {},\r\n    country: {},\r\n    error: false,\r\n    errorInfo: {},\r\n    errorStatus: {},\r\n    isMounted: false,\r\n    isLoading: false,\r\n}\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case FETCH_DATA_LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: action.isLoading\r\n            }\r\n\r\n        case FETCH_DATA_OK:\r\n            return {\r\n                ...state,\r\n                city: action.data,\r\n                country: action.data.sys,\r\n                temperature: action.data.main,\r\n                pressure: action.data.main,\r\n                humidity: action.data.main,\r\n                weather: action.data.weather[0],\r\n                wind: action.data.wind,\r\n                clouds: action.data.clouds,\r\n                sys: action.data.sys,\r\n                error: false,\r\n                isLoading: false\r\n            }\r\n\r\n        case FETCH_DATA_ERROR:\r\n            return {\r\n                ...state,\r\n                errorInfo: action.error.statusText,\r\n                errorStatus: action.error.status,\r\n                error: true,\r\n                isLoading: false,\r\n            }\r\n\r\n        case IS_MOUNTED:\r\n            return {\r\n                ...state,\r\n                isMounted: action.isMounted\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default weatherReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport weather from './reducers/weather';\r\nimport DevTools from './DevTools/DevTools'\r\n\r\nexport const store = createStore(\r\n    weather,\r\n    compose(\r\n        applyMiddleware(thunk),\r\n        DevTools.instrument()\r\n    )\r\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { store } from './redux/store'\r\nimport { Provider } from 'react-redux';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}